using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using MyApp.Data;
using MyApp.Models;

var builder = WebApplication.CreateBuilder(args);

// Додаємо контекст бази даних та Identity
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultUI()
    .AddDefaultTokenProviders();

// Додаємо аутентифікацію за допомогою cookie
builder.Services.AddAuthentication()
    .AddCookie(options =>
    {
        options.LoginPath = "/Account/Login";
        options.AccessDeniedPath = "/Account/AccessDenied";
    });

// Додаємо MVC
builder.Services.AddControllersWithViews();

var app = builder.Build();

// Налаштування безпеки та маршрутів
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

// Налаштування аутентифікації та авторизації
app.UseAuthentication();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();
/*                                                                                                  */
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.DependencyInjection;
using MyApp.Models;
using System;

public class SeedData
{
    public static void Initialize(IServiceProvider serviceProvider, UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager)
    {
        var roleNames = new[] { "ROLE_USER", "ROLE_ADMIN" };
        
        foreach (var roleName in roleNames)
        {
            var roleExist = roleManager.RoleExistsAsync(roleName).Result;
            if (!roleExist)
            {
                var role = new IdentityRole(roleName);
                roleManager.CreateAsync(role).Wait();
            }
        }

        var user = userManager.FindByEmailAsync("admin@example.com").Result;
        if (user == null)
        {
            user = new ApplicationUser { UserName = "admin@example.com", Email = "admin@example.com" };
            var result = userManager.CreateAsync(user, "Test@1234").Result;
            if (result.Succeeded)
            {
                userManager.AddToRoleAsync(user, "ROLE_ADMIN").Wait();
            }
        }
    }
}

/*                                                                                                  */
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

[Authorize(Roles = "ROLE_USER")]
public class UserController : Controller
{
    public IActionResult Index()
    {
        return View();
    }
}

[Authorize(Roles = "ROLE_ADMIN")]
public class AdminController : Controller
{
    public IActionResult Index()
    {
        return View();
    }
}
/*                                                                                                  */
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllerRoute(
        name: "admin",
        pattern: "admin/{controller=Home}/{action=Index}/{id?}")
        .RequireAuthorization(new AuthorizeAttribute { Roles = "ROLE_ADMIN" });

    endpoints.MapControllerRoute(
        name: "user",
        pattern: "user/{controller=Home}/{action=Index}/{id?}")
        .RequireAuthorization(new AuthorizeAttribute { Roles = "ROLE_USER" });
});
